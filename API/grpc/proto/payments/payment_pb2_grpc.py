# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from API.grpc.proto.payments import payment_pb2 as payment__pb2


class PaymentIntentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePaymentIntent = channel.unary_unary(
                '/payments.PaymentIntent/CreatePaymentIntent',
                request_serializer=payment__pb2.PaymentIntentParams.SerializeToString,
                response_deserializer=payment__pb2.PaymentIntentResponse.FromString,
                )


class PaymentIntentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePaymentIntent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentIntentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePaymentIntent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePaymentIntent,
                    request_deserializer=payment__pb2.PaymentIntentParams.FromString,
                    response_serializer=payment__pb2.PaymentIntentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'payments.PaymentIntent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentIntent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePaymentIntent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payments.PaymentIntent/CreatePaymentIntent',
            payment__pb2.PaymentIntentParams.SerializeToString,
            payment__pb2.PaymentIntentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PaymentSessionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePaymentSession = channel.unary_unary(
                '/payments.PaymentSession/CreatePaymentSession',
                request_serializer=payment__pb2.PaymentSessionParams.SerializeToString,
                response_deserializer=payment__pb2.PaymentSessionResponse.FromString,
                )


class PaymentSessionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePaymentSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentSessionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePaymentSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePaymentSession,
                    request_deserializer=payment__pb2.PaymentSessionParams.FromString,
                    response_serializer=payment__pb2.PaymentSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'payments.PaymentSession', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentSession(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePaymentSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payments.PaymentSession/CreatePaymentSession',
            payment__pb2.PaymentSessionParams.SerializeToString,
            payment__pb2.PaymentSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RefundStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRefund = channel.unary_unary(
                '/payments.Refund/CreateRefund',
                request_serializer=payment__pb2.RefundParams.SerializeToString,
                response_deserializer=payment__pb2.RefundResponse.FromString,
                )


class RefundServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateRefund(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RefundServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRefund': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRefund,
                    request_deserializer=payment__pb2.RefundParams.FromString,
                    response_serializer=payment__pb2.RefundResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'payments.Refund', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Refund(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateRefund(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/payments.Refund/CreateRefund',
            payment__pb2.RefundParams.SerializeToString,
            payment__pb2.RefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
